diff -Naur postgresql-13.3/src/backend/parser/parse_relation.c postgresql-13.3-new/src/backend/parser/parse_relation.c
--- postgresql-13.3/src/backend/parser/parse_relation.c	2023-01-30 14:44:38.449651288 +0800
+++ postgresql-13.3-new/src/backend/parser/parse_relation.c	2023-01-30 14:44:14.853999013 +0800
@@ -57,6 +57,11 @@
 #define MAX_FUZZY_DISTANCE				3
 
 
+/* lotus developer start */
+expand_nsitem_var_hook_type expand_nsitem_var_hook = NULL;
+/* lotus developer end */
+
+
 static ParseNamespaceItem *scanNameSpaceForRefname(ParseState *pstate,
 												   const char *refname,
 												   int location);
@@ -2966,6 +2971,12 @@
 	int			colindex;
 	ListCell   *lc;
 
+    /* lotus developer start */
+    if(expand_nsitem_var_hook) {
+        return expand_nsitem_var_hook(nsitem, sublevels_up, location, colnames);
+    }
+    /* lotus developer end */
+
 	if (colnames)
 		*colnames = NIL;
 	colindex = 0;
diff -Naur postgresql-13.3/src/backend/utils/init/miscinit.c postgresql-13.3-new/src/backend/utils/init/miscinit.c
--- postgresql-13.3/src/backend/utils/init/miscinit.c	2023-01-30 14:44:38.465651052 +0800
+++ postgresql-13.3-new/src/backend/utils/init/miscinit.c	2023-01-30 14:44:14.869998777 +0800
@@ -1573,54 +1573,127 @@
  * 'gucname': name of GUC variable, for error reports
  * 'restricted': if true, force libraries to be in $libdir/plugins/
  */
+/* lotus developer start */
+//static void
+//load_libraries(const char *libraries, const char *gucname, bool restricted)
+//{
+//	char	   *rawstring;
+//	List	   *elemlist;
+//	ListCell   *l;
+
+//	if (libraries == NULL || libraries[0] == '\0')
+//		return;					/* nothing to do */
+
+//	/* Need a modifiable copy of string */
+//	rawstring = pstrdup(libraries);
+
+//	/* Parse string into list of filename paths */
+//	if (!SplitDirectoriesString(rawstring, ',', &elemlist))
+//	{
+//		/* syntax error in list */
+//		list_free_deep(elemlist);
+//		pfree(rawstring);
+//		ereport(LOG,
+//				(errcode(ERRCODE_SYNTAX_ERROR),
+//				 errmsg("invalid list syntax in parameter \"%s\"",
+//						gucname)));
+//		return;
+//	}
+
+//	foreach(l, elemlist)
+//	{
+//		/* Note that filename was already canonicalized */
+//		char	   *filename = (char *) lfirst(l);
+//		char	   *expanded = NULL;
+
+//		/* If restricting, insert $libdir/plugins if not mentioned already */
+//		if (restricted && first_dir_separator(filename) == NULL)
+//		{
+//			expanded = psprintf("$libdir/plugins/%s", filename);
+//			filename = expanded;
+//		}
+//		load_file(filename, restricted);
+//		ereport(DEBUG1,
+//				(errmsg("loaded library \"%s\"", filename)));
+//		if (expanded)
+//			pfree(expanded);
+//	}
+
+//	list_free_deep(elemlist);
+//	pfree(rawstring);
+//}
+
 static void
 load_libraries(const char *libraries, const char *gucname, bool restricted)
 {
-	char	   *rawstring;
-	List	   *elemlist;
-	ListCell   *l;
-
-	if (libraries == NULL || libraries[0] == '\0')
-		return;					/* nothing to do */
-
-	/* Need a modifiable copy of string */
-	rawstring = pstrdup(libraries);
-
-	/* Parse string into list of filename paths */
-	if (!SplitDirectoriesString(rawstring, ',', &elemlist))
-	{
-		/* syntax error in list */
-		list_free_deep(elemlist);
-		pfree(rawstring);
-		ereport(LOG,
-				(errcode(ERRCODE_SYNTAX_ERROR),
-				 errmsg("invalid list syntax in parameter \"%s\"",
-						gucname)));
-		return;
-	}
-
-	foreach(l, elemlist)
-	{
-		/* Note that filename was already canonicalized */
-		char	   *filename = (char *) lfirst(l);
-		char	   *expanded = NULL;
-
-		/* If restricting, insert $libdir/plugins if not mentioned already */
-		if (restricted && first_dir_separator(filename) == NULL)
-		{
-			expanded = psprintf("$libdir/plugins/%s", filename);
-			filename = expanded;
-		}
-		load_file(filename, restricted);
-		ereport(DEBUG1,
-				(errmsg("loaded library \"%s\"", filename)));
-		if (expanded)
-			pfree(expanded);
-	}
-
-	list_free_deep(elemlist);
-	pfree(rawstring);
+    char	   *rawstring;
+    List	   *elemlist;
+    ListCell   *l;
+    bool preload = false;
+    bool found = false;
+
+    if(!strcmp(gucname, "shared_preload_libraries")) preload = true;
+
+    if (libraries == NULL || libraries[0] == '\0'){
+        if(preload){
+            ereport(ERROR,
+                    (errcode(ERRCODE_SYNTAX_ERROR),
+                     errmsg("set ldblockchain in shared_preload_libraries")));
+        }
+
+        return;					/* nothing to do */
+    }
+
+    /* Need a modifiable copy of string */
+    rawstring = pstrdup(libraries);
+
+    /* Parse string into list of filename paths */
+    if (!SplitDirectoriesString(rawstring, ',', &elemlist))
+    {
+        /* syntax error in list */
+        list_free_deep(elemlist);
+        pfree(rawstring);
+        ereport(ERROR,
+                (errcode(ERRCODE_SYNTAX_ERROR),
+                 errmsg("invalid list syntax in parameter \"%s\"",
+                        gucname)));
+        return;
+    }
+
+    foreach(l, elemlist)
+    {
+        /* Note that filename was already canonicalized */
+        char	   *filename = (char *) lfirst(l);
+        char	   *expanded = NULL;
+
+        if(!strcmp(filename, "ldblockchain")){
+            found = true;
+        }
+
+        /* If restricting, insert $libdir/plugins if not mentioned already */
+        if (restricted && first_dir_separator(filename) == NULL)
+        {
+            expanded = psprintf("$libdir/plugins/%s", filename);
+            filename = expanded;
+        }
+        load_file(filename, restricted);
+        ereport(DEBUG1,
+                (errmsg("loaded library \"%s\"", filename)));
+        if (expanded)
+            pfree(expanded);
+    }
+
+    list_free_deep(elemlist);
+    pfree(rawstring);
+
+    if(preload && !found){
+        ereport(ERROR,
+                (errcode(ERRCODE_SYNTAX_ERROR),
+                 errmsg("set ldblockchain in shared_preload_libraries")));
+    }
 }
+/* lotus developer end */
+
 
 /*
  * process any libraries that should be preloaded at postmaster start
diff -Naur postgresql-13.3/src/include/parser/parse_relation.h postgresql-13.3-new/src/include/parser/parse_relation.h
--- postgresql-13.3/src/include/parser/parse_relation.h	2023-01-30 14:44:38.501650521 +0800
+++ postgresql-13.3-new/src/include/parser/parse_relation.h	2023-01-30 14:44:14.801999778 +0800
@@ -16,6 +16,12 @@
 
 #include "parser/parse_node.h"
 
+/* lotus developer start */
+typedef List *(*expand_nsitem_var_hook_type)(ParseNamespaceItem *nsitem,
+                                             int sublevels_up, int location,
+                                             List **colnames);
+extern PGDLLIMPORT expand_nsitem_var_hook_type expand_nsitem_var_hook;
+/* lotus developer end */
 
 extern ParseNamespaceItem *refnameNamespaceItem(ParseState *pstate,
 												const char *schemaname,
